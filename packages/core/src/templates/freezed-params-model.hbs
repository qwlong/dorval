// ignore_for_file: unused_element, unnecessary_this, always_put_required_named_parameters_first, constant_identifier_names

import 'package:freezed_annotation/freezed_annotation.dart';
{{#each imports}}
import '../{{this}}';
{{/each}}

part '{{fileName}}.f.freezed.dart';
part '{{fileName}}.f.g.dart';

{{#if description}}
/// {{description}}
{{/if}}
@freezed
abstract class {{className}} with _${{className}} {
  {{#if hasComplexNestedQueryParams}}const {{className}}._();
  {{/if}}const factory {{className}}({
    {{#each properties}}
    {{#if description}}
{{{dartDoc description indent=4}}}
    {{/if}}
    {{#if jsonKey}}
    @JsonKey(name: '{{jsonKey}}')
    {{/if}}
    {{#if required}}required {{{type}}} {{name}},{{else}}{{{type}}}? {{name}},{{/if}}
{{#unless @last}}

{{/unless}}
    {{/each}}
  }) = _{{className}};

  factory {{className}}.fromJson(Map<String, dynamic> json) =>
      _${{className}}FromJson(json);{{#if hasComplexNestedQueryParams}}
  
  /// Convert to query parameters for API calls
  /// Flattens nested objects into key[nestedKey]=value format
  Map<String, dynamic> toQueryParameters() {
    final json = toJson();
    final result = <String, dynamic>{};
    
    void flatten(String prefix, dynamic value) {
      if (value == null) return;
      
      if (value is Map<String, dynamic>) {
        // Flatten nested objects: key[nestedKey]=value
        value.forEach((nestedKey, nestedValue) {
          final newKey = prefix.isEmpty ? nestedKey : '$prefix[$nestedKey]';
          flatten(newKey, nestedValue);
        });
      } else if (value is List) {
        if (value.isEmpty) return;
        // Handle lists: key[0]=value1, key[1]=value2
        for (var i = 0; i < value.length; i++) {
          final newKey = '$prefix[$i]';
          flatten(newKey, value[i]);
        }
      } else {
        // Primitive values (String, int, double, bool, DateTime, etc.)
        result[prefix] = value;
      }
    }
    
    json.forEach((key, value) {
      flatten(key, value);
    });
    
    return result;
  }{{/if}}
}